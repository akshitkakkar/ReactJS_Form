{"version":3,"sources":["actions/types.js","actions/index.js","helpers/formFields.js","components/FormField.js","components/Form.js","App.js","reportWebVitals.js","reducers/index.js","reducers/userLoginReducer.js","index.js"],"names":["USER_LOGIN","userLogin","credentials","dispatch","a","axios","post","type","payload","label","name","input","meta","error","touched","className","validateEmailRegEx","reduxForm","validate","values","errors","_","each","formFields","test","form","destroyOnUnmount","connect","actions","handleSubmit","onSubmit","map","Field","component","FormField","id","tabIndex","htmlFor","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","combineReducers","loggedIn","action","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kVAIaA,EAAa,aCEbC,EAAY,SAACC,GAAD,8CACrB,WAAMC,GAAN,SAAAC,EAAA,sEACqBC,IAAMC,KAAK,aAAcJ,GAD9C,cAEGC,EAAS,CAACI,KAAMP,EAAYQ,SAAS,IAFxC,2CADqB,uD,mCCHV,GACX,CAACC,MAAO,QAASC,KAAM,QAASH,KAAM,QACtC,CAACE,MAAO,WAAYC,KAAM,WAAYH,KAAM,a,QCAjC,cAAmD,IAAjDI,EAAgD,EAAhDA,MAAOF,EAAyC,EAAzCA,MAAOF,EAAkC,EAAlCA,KAAkC,IAA5BK,KAAOC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAC/C,OACI,sBAAKC,UAAU,aAAf,UACI,gCAAQN,IACR,iDAAWE,GAAX,IAAkBJ,KAAMA,KACxB,qBAAKQ,UAAU,kBAAf,SACKD,GAAWD,QCHtBG,EAAqB,yJA4DZC,cAAU,CACrBC,SApBa,SAACC,GACd,IAAMC,EAAS,GAYf,OAVAC,IAAEC,KAAKC,GAAY,YAAa,IAAXb,EAAU,EAAVA,KACbS,EAAOT,KACPU,EAAOV,GAAQ,8BAIwB,GAA5CM,EAAmBQ,KAAKL,EAAM,SAC7BC,EAAM,MAAY,sCAGfA,GAQPK,KAAM,YACNC,kBAAkB,GAHPT,CAIZU,YAAQ,KAAMC,EAAdD,EA1DU,SAAC,GAA+B,IAA9B1B,EAA6B,EAA7BA,UAAW4B,EAAkB,EAAlBA,aAWtB,OACI,qBAAKd,UAAU,aAAf,SACI,uBAAMe,SAAUD,GAAa,SAAAV,GAAM,OAAIlB,EAAUkB,MAAjD,UACI,yCAVDE,IAAEU,IAAIR,GAAY,YAA0B,IAAxBd,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,KAAMH,EAAU,EAAVA,KACpC,OACI,cAACyB,EAAA,EAAD,CAAkBzB,KAAMA,EAAM0B,UAAWC,EAAWzB,MAAOA,EAAOC,KAAMA,GAA5DA,MAUZ,sBAAKK,UAAU,gBAAf,UACI,uBAAOoB,GAAG,iBAAiB5B,KAAK,WAAW6B,SAAS,MACpD,uBAAOC,QAAQ,iBAAf,6BAEJ,wBAAQtB,UAAU,cAAcR,KAAK,SAArC,qBACA,sBAAKQ,UAAU,YAAf,UACI,mBAAGuB,KAAK,IAAR,mCACA,wDAA0B,mBAAGA,KAAK,IAAR,wBAC1B,mBAAGA,KAAK,IAAR,mDC3BLC,MARf,WACE,OACE,qBAAKxB,UAAU,MAAf,SACE,cAAC,EAAD,OCMSyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,wBCHCQ,cAAgB,CAC3BC,SCAW,WAA+B,IAATC,EAAQ,uCACzC,OAAOA,EAAO5C,MACV,KAAKP,EACD,OAAOmD,EAAO3C,QAClB,QACI,OAAO,IDJfiB,KAAMR,MEKJmC,EAAQC,YAAYC,EAAU,GAAIC,YAAgBC,MAExDC,IAASC,OAAO,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACd,cAAC,IAAMO,WAAP,UACE,cAAC,EAAD,QAGFC,SAASC,eAAe,SAM1BrB,M","file":"static/js/main.c151f29b.chunk.js","sourcesContent":["/**\r\n * Action type constants\r\n */\r\n\r\nexport const USER_LOGIN = 'user-login'","import axios from 'axios'\r\nimport {USER_LOGIN} from './types'\r\n\r\n/**\r\n * Action creator to be called when user attempts to log in\r\n */\r\nexport const userLogin = (credentials) =>\r\n    async dispatch => {\r\n       const res = await axios.post('/api/login', credentials)\r\n       dispatch({type: USER_LOGIN, payload: true})\r\n    }\r\n","/*\r\n    * Helper object to dynamically add fields to the form\r\n*/\r\nexport default [\r\n    {label: 'Email', name: 'email', type: 'text'},\r\n    {label: 'Password', name: 'password', type: 'password'}\r\n]","import React from 'react'\r\n\r\n/**\r\n * Helper method to dynamically render form field elements incorporating redux-form validation\r\n */\r\nexport default ({input, label, type, meta: {error, touched}}) => {\r\n    return (\r\n        <div className=\"form-field\">\r\n            <label>{label}</label>\r\n            <input {...input} type={type}/>\r\n            <div className=\"form-validation\">\r\n                {touched && error}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport * as actions from '../actions'\r\nimport {reduxForm, Field} from 'redux-form'\r\nimport _ from 'lodash'\r\nimport formFields from '../helpers/formFields'\r\nimport FormField from './FormField'\r\n\r\nconst validateEmailRegEx = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n\r\n/*\r\n    * Pulling userLogin action creator from redux connect and handleSubmit from redux form\r\n*/\r\nconst Form = ({userLogin, handleSubmit}) => {\r\n\r\n    const renderFields = () => {\r\n\r\n        return _.map(formFields, ({label, name, type}) => {\r\n            return (\r\n                <Field key={name} type={type} component={FormField} label={label} name={name}/>\r\n            )\r\n        })\r\n    }\r\n\r\n    return(\r\n        <div className=\"form-login\">\r\n            <form onSubmit={handleSubmit(values => userLogin(values))}>\r\n                <h3>Sign In</h3>\r\n                {renderFields()}\r\n                <div className=\"form-checkbox\">\r\n                    <input id=\"remember-login\" type=\"checkbox\" tabIndex=\"0\"/>\r\n                    <label htmlFor=\"remember-login\">Remember Me?</label>\r\n                </div>\r\n                <button className=\"form-submit\" type=\"submit\">Sign In</button>\r\n                <div className=\"form-help\">\r\n                    <a href=\"#\">Forgot your password?</a>\r\n                    <p>Don't have an account? <a href=\"#\">Sign up</a></p>\r\n                    <a href=\"#\">Resend Email Confirmation</a>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n/*\r\n    * Validate function runs onBlur of input fields and right before handleSubmit\r\n    * Checks for error in fields and blocks submission\r\n*/\r\nconst validate = (values) => {\r\n    const errors = {};\r\n\r\n    _.each(formFields, ({name}) => {\r\n        if(!values[name]) {\r\n            errors[name] = \"This field is mandatory\"\r\n        }\r\n    })\r\n\r\n    if(validateEmailRegEx.test(values[\"email\"]) == false) {\r\n        errors[\"email\"] = \"Please enter a valid email address\"\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\n/*\r\n    * Connecting to Redux Store and Redux Form\r\n*/\r\nexport default reduxForm({\r\n    validate,\r\n    form: 'loginForm',\r\n    destroyOnUnmount: true\r\n})(connect(null, actions)(Form))","import './App.scss';\nimport Form from './components/Form'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers} from 'redux'\r\nimport userLoginReducer from './userLoginReducer'\r\nimport {reducer as reduxForm} from 'redux-form'\r\n\r\nexport default combineReducers({\r\n    loggedIn: userLoginReducer,\r\n    form: reduxForm\r\n})","import {USER_LOGIN} from '../actions/types'\r\n\r\n/**\r\n * Reducer fired on successful log in response in userLogin action creator\r\n */\r\nexport default function(state=false, action) {\r\n    switch(action.type) {\r\n        case USER_LOGIN:\r\n            return action.payload\r\n        default:\r\n            return false\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'typeface-roboto'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport reducers from './reducers'\n\nconst store = createStore(reducers, {}, applyMiddleware(reduxThunk));\n\nReactDOM.render(<Provider store={store}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}